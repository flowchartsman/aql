// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

// helper method to exfiltrate pigeon's generated error type
func getParseError(err error) error {
	switch ev := err.(type) {
	case errList:
		if pe, ok := ev[0].(*parserError); ok {
			return &ParseError{
				Inner:    pe.Inner,
				Line:     pe.pos.line,
				Column:   pe.pos.col,
				Offset:   pe.pos.offset,
				Prefix:   pe.prefix,
				Expected: pe.expected,
			}
		}
	}
	return err
}

// TODO: In addition to type annotation, there needs to be a semantic analysis layer to check type and arity concordance and collapse unncessary clauses and such. This will tie in with operator "registration", which allows new operators to specify their input types and arity or even extend the operating types of extant operators. This may require a new structure past the basic node.

// TODO: PLUGINS
// operator: accepts, validate, arity
// function: types for value generators? multi-arity?, something to specify whether function needs to be rerun for each comparator.

// special exceptions for operators like "exists", which should only ever have an arity of one

// ParseQuery parses the AQL query string and returns the query root node
func ParseQuery(query string) (*Node, error) {
	v, err := Parse("", []byte(query))
	if err != nil {
		return nil, getParseError(err)
	}
	return getRootNode(v)
}

// ParseQueryReader parses the AQL query from an io.Reader and returns the query
// root node
func ParseQueryReader(queryReader io.Reader) (*Node, error) {
	v, err := ParseReader("", queryReader)
	if err != nil {
		return nil, getParseError(err)
	}
	return getRootNode(v)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Start",
			pos:  position{line: 60, col: 1, offset: 1660},
			expr: &actionExpr{
				pos: position{line: 60, col: 10, offset: 1669},
				run: (*parser).callonStart1,
				expr: &seqExpr{
					pos: position{line: 60, col: 10, offset: 1669},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 60, col: 10, offset: 1669},
							label: "query",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 16, offset: 1675},
								name: "Query",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 60, col: 22, offset: 1681},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Query",
			pos:  position{line: 64, col: 1, offset: 1712},
			expr: &actionExpr{
				pos: position{line: 64, col: 10, offset: 1721},
				run: (*parser).callonQuery1,
				expr: &seqExpr{
					pos: position{line: 64, col: 10, offset: 1721},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 64, col: 10, offset: 1721},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 12, offset: 1723},
							label: "clause",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 19, offset: 1730},
								name: "OrClause",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 64, col: 28, offset: 1739},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "OrClause",
			pos:  position{line: 72, col: 1, offset: 1789},
			expr: &choiceExpr{
				pos: position{line: 72, col: 13, offset: 1801},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 72, col: 13, offset: 1801},
						run: (*parser).callonOrClause2,
						expr: &seqExpr{
							pos: position{line: 72, col: 13, offset: 1801},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 72, col: 13, offset: 1801},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 17, offset: 1805},
										name: "AndClause",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 27, offset: 1815},
									name: "space",
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 33, offset: 1821},
									name: "logicalOR",
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 43, offset: 1831},
									name: "space",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 49, offset: 1837},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 53, offset: 1841},
										name: "OrClause",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 5, offset: 1967},
						name: "AndClause",
					},
				},
			},
		},
		{
			name: "AndClause",
			pos:  position{line: 80, col: 1, offset: 1978},
			expr: &choiceExpr{
				pos: position{line: 80, col: 14, offset: 1991},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 80, col: 14, offset: 1991},
						run: (*parser).callonAndClause2,
						expr: &seqExpr{
							pos: position{line: 80, col: 14, offset: 1991},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 80, col: 14, offset: 1991},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 80, col: 18, offset: 1995},
										name: "NotClause",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 28, offset: 2005},
									name: "space",
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 34, offset: 2011},
									name: "logicalAND",
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 45, offset: 2022},
									name: "space",
								},
								&labeledExpr{
									pos:   position{line: 80, col: 51, offset: 2028},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 80, col: 55, offset: 2032},
										name: "AndClause",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 86, col: 5, offset: 2160},
						name: "NotClause",
					},
				},
			},
		},
		{
			name: "NotClause",
			pos:  position{line: 88, col: 1, offset: 2171},
			expr: &choiceExpr{
				pos: position{line: 88, col: 14, offset: 2184},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 88, col: 14, offset: 2184},
						run: (*parser).callonNotClause2,
						expr: &seqExpr{
							pos: position{line: 88, col: 14, offset: 2184},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 88, col: 14, offset: 2184},
									name: "logicalNOT",
								},
								&labeledExpr{
									pos:   position{line: 88, col: 25, offset: 2195},
									label: "cmp",
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 29, offset: 2199},
										name: "Comparison",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 94, col: 5, offset: 2320},
						name: "Comparison",
					},
				},
			},
		},
		{
			name: "Comparison",
			pos:  position{line: 96, col: 1, offset: 2332},
			expr: &choiceExpr{
				pos: position{line: 96, col: 15, offset: 2346},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 96, col: 15, offset: 2346},
						run: (*parser).callonComparison2,
						expr: &seqExpr{
							pos: position{line: 96, col: 15, offset: 2346},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 15, offset: 2346},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 96, col: 19, offset: 2350},
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 19, offset: 2350},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 96, col: 26, offset: 2357},
									label: "query",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 32, offset: 2363},
										name: "OrClause",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 96, col: 41, offset: 2372},
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 41, offset: 2372},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 96, col: 48, offset: 2379},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 98, col: 6, offset: 2411},
						run: (*parser).callonComparison12,
						expr: &seqExpr{
							pos: position{line: 98, col: 6, offset: 2411},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 98, col: 6, offset: 2411},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 12, offset: 2417},
										name: "Field",
									},
								},
								&litMatcher{
									pos:        position{line: 98, col: 18, offset: 2423},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 98, col: 22, offset: 2427},
									label: "operation",
									expr: &zeroOrOneExpr{
										pos: position{line: 98, col: 32, offset: 2437},
										expr: &ruleRefExpr{
											pos:  position{line: 98, col: 32, offset: 2437},
											name: "opCOMP",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 98, col: 40, offset: 2445},
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 40, offset: 2445},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 98, col: 47, offset: 2452},
									label: "values",
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 54, offset: 2459},
										name: "ValueList",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 129, col: 1, offset: 3202},
			expr: &actionExpr{
				pos: position{line: 129, col: 10, offset: 3211},
				run: (*parser).callonField1,
				expr: &labeledExpr{
					pos:   position{line: 129, col: 10, offset: 3211},
					label: "pieces",
					expr: &seqExpr{
						pos: position{line: 129, col: 18, offset: 3219},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 129, col: 18, offset: 3219},
								name: "FieldPiece",
							},
							&zeroOrMoreExpr{
								pos: position{line: 129, col: 29, offset: 3230},
								expr: &seqExpr{
									pos: position{line: 129, col: 30, offset: 3231},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 129, col: 30, offset: 3231},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&ruleRefExpr{
											pos:  position{line: 129, col: 34, offset: 3235},
											name: "FieldPiece",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldPiece",
			pos:  position{line: 143, col: 1, offset: 3593},
			expr: &choiceExpr{
				pos: position{line: 143, col: 15, offset: 3607},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 143, col: 15, offset: 3607},
						name: "QuotedFieldPiece",
					},
					&ruleRefExpr{
						pos:  position{line: 143, col: 34, offset: 3626},
						name: "UnquotedFieldPiece",
					},
					&ruleRefExpr{
						pos:  position{line: 143, col: 55, offset: 3647},
						name: "Star",
					},
				},
			},
		},
		{
			name: "UnquotedFieldPiece",
			pos:  position{line: 145, col: 1, offset: 3653},
			expr: &actionExpr{
				pos: position{line: 145, col: 23, offset: 3675},
				run: (*parser).callonUnquotedFieldPiece1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 23, offset: 3675},
					expr: &charClassMatcher{
						pos:        position{line: 145, col: 23, offset: 3675},
						val:        "[a-z0-9_-]i",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'a', 'z', '0', '9'},
						ignoreCase: true,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "QuotedFieldPiece",
			pos:  position{line: 149, col: 1, offset: 3724},
			expr: &ruleRefExpr{
				pos:  position{line: 149, col: 21, offset: 3744},
				name: "QuotedValue",
			},
		},
		{
			name: "Star",
			pos:  position{line: 151, col: 1, offset: 3757},
			expr: &actionExpr{
				pos: position{line: 151, col: 9, offset: 3765},
				run: (*parser).callonStar1,
				expr: &litMatcher{
					pos:        position{line: 151, col: 9, offset: 3765},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "ValueList",
			pos:  position{line: 160, col: 1, offset: 3883},
			expr: &choiceExpr{
				pos: position{line: 160, col: 14, offset: 3896},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 160, col: 14, offset: 3896},
						run: (*parser).callonValueList2,
						expr: &seqExpr{
							pos: position{line: 160, col: 14, offset: 3896},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 160, col: 14, offset: 3896},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrOneExpr{
									pos: position{line: 160, col: 18, offset: 3900},
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 18, offset: 3900},
										name: "space",
									},
								},
								&labeledExpr{
									pos:   position{line: 160, col: 25, offset: 3907},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 31, offset: 3913},
										name: "Value",
									},
								},
								&labeledExpr{
									pos:   position{line: 160, col: 37, offset: 3919},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 160, col: 42, offset: 3924},
										expr: &seqExpr{
											pos: position{line: 160, col: 44, offset: 3926},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 160, col: 44, offset: 3926},
													expr: &ruleRefExpr{
														pos:  position{line: 160, col: 44, offset: 3926},
														name: "space",
													},
												},
												&litMatcher{
													pos:        position{line: 160, col: 51, offset: 3933},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&zeroOrOneExpr{
													pos: position{line: 160, col: 55, offset: 3937},
													expr: &ruleRefExpr{
														pos:  position{line: 160, col: 55, offset: 3937},
														name: "space",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 160, col: 62, offset: 3944},
													name: "Value",
												},
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 160, col: 71, offset: 3953},
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 71, offset: 3953},
										name: "space",
									},
								},
								&litMatcher{
									pos:        position{line: 160, col: 78, offset: 3960},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 4012},
						run: (*parser).callonValueList21,
						expr: &labeledExpr{
							pos:   position{line: 162, col: 5, offset: 4012},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 11, offset: 4018},
								name: "Value",
							},
						},
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 166, col: 1, offset: 4070},
			expr: &choiceExpr{
				pos: position{line: 166, col: 10, offset: 4079},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 166, col: 10, offset: 4079},
						name: "QuotedValue",
					},
					&ruleRefExpr{
						pos:  position{line: 167, col: 1, offset: 4094},
						name: "RegexValue",
					},
					&actionExpr{
						pos: position{line: 168, col: 1, offset: 4108},
						run: (*parser).callonValue4,
						expr: &ruleRefExpr{
							pos:  position{line: 168, col: 1, offset: 4108},
							name: "BareValue",
						},
					},
				},
			},
		},
		{
			name: "QuotedValue",
			pos:  position{line: 176, col: 1, offset: 4219},
			expr: &actionExpr{
				pos: position{line: 176, col: 15, offset: 4235},
				run: (*parser).callonQuotedValue1,
				expr: &seqExpr{
					pos: position{line: 176, col: 15, offset: 4235},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 176, col: 15, offset: 4235},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 19, offset: 4239},
							expr: &choiceExpr{
								pos: position{line: 176, col: 21, offset: 4241},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 176, col: 21, offset: 4241},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 176, col: 21, offset: 4241},
												expr: &ruleRefExpr{
													pos:  position{line: 176, col: 22, offset: 4242},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 176, col: 34, offset: 4254,
											},
										},
									},
									&seqExpr{
										pos: position{line: 176, col: 38, offset: 4258},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 176, col: 38, offset: 4258},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 176, col: 43, offset: 4263},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 176, col: 61, offset: 4281},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 181, col: 1, offset: 4399},
			expr: &charClassMatcher{
				pos:        position{line: 181, col: 15, offset: 4415},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 183, col: 1, offset: 4431},
			expr: &choiceExpr{
				pos: position{line: 183, col: 18, offset: 4450},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 183, col: 18, offset: 4450},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 183, col: 37, offset: 4469},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 185, col: 1, offset: 4484},
			expr: &charClassMatcher{
				pos:        position{line: 185, col: 20, offset: 4505},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 187, col: 1, offset: 4518},
			expr: &seqExpr{
				pos: position{line: 187, col: 17, offset: 4536},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 187, col: 17, offset: 4536},
						val:        "u",
						ignoreCase: false,
						want:       "\"u\"",
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 21, offset: 4540},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 30, offset: 4549},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 39, offset: 4558},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 48, offset: 4567},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 189, col: 1, offset: 4577},
			expr: &charClassMatcher{
				pos:        position{line: 189, col: 12, offset: 4590},
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
				inverted:   false,
			},
		},
		{
			name: "ValueChars",
			pos:  position{line: 191, col: 1, offset: 4601},
			expr: &charClassMatcher{
				pos:        position{line: 191, col: 15, offset: 4615},
				val:        "[a-zA-Z0-9 !]",
				chars:      []rune{' ', '!'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "RegexValue",
			pos:  position{line: 193, col: 1, offset: 4630},
			expr: &actionExpr{
				pos: position{line: 193, col: 14, offset: 4645},
				run: (*parser).callonRegexValue1,
				expr: &seqExpr{
					pos: position{line: 193, col: 14, offset: 4645},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 193, col: 14, offset: 4645},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 193, col: 18, offset: 4649},
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 18, offset: 4649},
								name: "RegexChar",
							},
						},
						&litMatcher{
							pos:        position{line: 193, col: 29, offset: 4660},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
				},
			},
		},
		{
			name: "RegexChar",
			pos:  position{line: 203, col: 1, offset: 5098},
			expr: &choiceExpr{
				pos: position{line: 203, col: 13, offset: 5112},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 203, col: 13, offset: 5112},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 203, col: 13, offset: 5112},
								expr: &choiceExpr{
									pos: position{line: 203, col: 16, offset: 5115},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 203, col: 16, offset: 5115},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
										&litMatcher{
											pos:        position{line: 203, col: 22, offset: 5121},
											val:        "\\",
											ignoreCase: false,
											want:       "\"\\\\\"",
										},
										&ruleRefExpr{
											pos:  position{line: 203, col: 29, offset: 5128},
											name: "EOL",
										},
									},
								},
							},
							&anyMatcher{
								line: 203, col: 34, offset: 5133,
							},
						},
					},
					&seqExpr{
						pos: position{line: 203, col: 38, offset: 5137},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 203, col: 38, offset: 5137},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
							&ruleRefExpr{
								pos:  position{line: 203, col: 43, offset: 5142},
								name: "RegexEscape",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexEscape",
			pos:  position{line: 204, col: 1, offset: 5154},
			expr: &seqExpr{
				pos: position{line: 204, col: 15, offset: 5170},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 204, col: 15, offset: 5170},
						expr: &choiceExpr{
							pos: position{line: 204, col: 17, offset: 5172},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 204, col: 17, offset: 5172},
									name: "EOL",
								},
								&ruleRefExpr{
									pos:  position{line: 204, col: 23, offset: 5178},
									name: "EOF",
								},
							},
						},
					},
					&anyMatcher{
						line: 204, col: 29, offset: 5184,
					},
				},
			},
		},
		{
			name: "BareValue",
			pos:  position{line: 210, col: 1, offset: 5484},
			expr: &choiceExpr{
				pos: position{line: 210, col: 15, offset: 5498},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 15, offset: 5498},
						name: "Timestamp",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 15, offset: 5522},
						name: "CIDRValue",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 15, offset: 5546},
						name: "NumericValue",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 15, offset: 5573},
						name: "ExistsValue",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 15, offset: 5599},
						name: "BoolValue",
					},
				},
			},
		},
		{
			name: "ExistsValue",
			pos:  position{line: 217, col: 1, offset: 5657},
			expr: &litMatcher{
				pos:        position{line: 217, col: 16, offset: 5672},
				val:        "exists",
				ignoreCase: false,
				want:       "\"exists\"",
			},
		},
		{
			name: "BoolValue",
			pos:  position{line: 219, col: 1, offset: 5682},
			expr: &choiceExpr{
				pos: position{line: 219, col: 14, offset: 5695},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 219, col: 14, offset: 5695},
						val:        "false",
						ignoreCase: false,
						want:       "\"false\"",
					},
					&litMatcher{
						pos:        position{line: 219, col: 24, offset: 5705},
						val:        "true",
						ignoreCase: false,
						want:       "\"true\"",
					},
				},
			},
		},
		{
			name: "NumericValue",
			pos:  position{line: 221, col: 1, offset: 5713},
			expr: &seqExpr{
				pos: position{line: 221, col: 17, offset: 5729},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 221, col: 17, offset: 5729},
						expr: &litMatcher{
							pos:        position{line: 221, col: 17, offset: 5729},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
					&choiceExpr{
						pos: position{line: 221, col: 23, offset: 5735},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 221, col: 23, offset: 5735},
								name: "Float",
							},
							&ruleRefExpr{
								pos:  position{line: 221, col: 31, offset: 5743},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "Float",
			pos:  position{line: 223, col: 1, offset: 5753},
			expr: &seqExpr{
				pos: position{line: 223, col: 10, offset: 5762},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 223, col: 10, offset: 5762},
						expr: &charClassMatcher{
							pos:        position{line: 223, col: 10, offset: 5762},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&litMatcher{
						pos:        position{line: 223, col: 17, offset: 5769},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&oneOrMoreExpr{
						pos: position{line: 223, col: 21, offset: 5773},
						expr: &charClassMatcher{
							pos:        position{line: 223, col: 21, offset: 5773},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 225, col: 1, offset: 5781},
			expr: &oneOrMoreExpr{
				pos: position{line: 225, col: 12, offset: 5792},
				expr: &charClassMatcher{
					pos:        position{line: 225, col: 12, offset: 5792},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "CIDRValue",
			pos:  position{line: 227, col: 1, offset: 5800},
			expr: &actionExpr{
				pos: position{line: 227, col: 14, offset: 5813},
				run: (*parser).callonCIDRValue1,
				expr: &seqExpr{
					pos: position{line: 227, col: 14, offset: 5813},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 227, col: 14, offset: 5813},
							name: "Octet",
						},
						&litMatcher{
							pos:        position{line: 227, col: 20, offset: 5819},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 24, offset: 5823},
							name: "Octet",
						},
						&litMatcher{
							pos:        position{line: 227, col: 30, offset: 5829},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 34, offset: 5833},
							name: "Octet",
						},
						&litMatcher{
							pos:        position{line: 227, col: 40, offset: 5839},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 44, offset: 5843},
							name: "Octet",
						},
						&litMatcher{
							pos:        position{line: 227, col: 50, offset: 5849},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&charClassMatcher{
							pos:        position{line: 227, col: 54, offset: 5853},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrOneExpr{
							pos: position{line: 227, col: 59, offset: 5858},
							expr: &charClassMatcher{
								pos:        position{line: 227, col: 59, offset: 5858},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Octet",
			pos:  position{line: 234, col: 1, offset: 6114},
			expr: &seqExpr{
				pos: position{line: 234, col: 10, offset: 6123},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 234, col: 10, offset: 6123},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&zeroOrOneExpr{
						pos: position{line: 234, col: 15, offset: 6128},
						expr: &charClassMatcher{
							pos:        position{line: 234, col: 15, offset: 6128},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 234, col: 21, offset: 6134},
						expr: &charClassMatcher{
							pos:        position{line: 234, col: 21, offset: 6134},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "Timestamp",
			pos:  position{line: 237, col: 1, offset: 6154},
			expr: &choiceExpr{
				pos: position{line: 237, col: 14, offset: 6167},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 237, col: 14, offset: 6167},
						name: "dateTime",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 25, offset: 6178},
						name: "fullDate",
					},
				},
			},
		},
		{
			name: "dateTime",
			pos:  position{line: 240, col: 1, offset: 6207},
			expr: &seqExpr{
				pos: position{line: 240, col: 13, offset: 6219},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 240, col: 13, offset: 6219},
						name: "fullDate",
					},
					&choiceExpr{
						pos: position{line: 240, col: 23, offset: 6229},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 240, col: 23, offset: 6229},
								val:        "t",
								ignoreCase: true,
								want:       "\"T\"i",
							},
							&litMatcher{
								pos:        position{line: 240, col: 30, offset: 6236},
								val:        " ",
								ignoreCase: false,
								want:       "\" \"",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 35, offset: 6241},
						name: "fullTime",
					},
				},
			},
		},
		{
			name: "fullDate",
			pos:  position{line: 241, col: 1, offset: 6250},
			expr: &seqExpr{
				pos: position{line: 241, col: 13, offset: 6262},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 241, col: 13, offset: 6262},
						name: "dateFullyear",
					},
					&litMatcher{
						pos:        position{line: 241, col: 26, offset: 6275},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 30, offset: 6279},
						name: "dateMonth",
					},
					&litMatcher{
						pos:        position{line: 241, col: 40, offset: 6289},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 44, offset: 6293},
						name: "dateMday",
					},
				},
			},
		},
		{
			name: "dateFullyear",
			pos:  position{line: 243, col: 1, offset: 6303},
			expr: &ruleRefExpr{
				pos:  position{line: 243, col: 17, offset: 6319},
				name: "Digit4",
			},
		},
		{
			name: "dateMonth",
			pos:  position{line: 244, col: 1, offset: 6326},
			expr: &ruleRefExpr{
				pos:  position{line: 244, col: 14, offset: 6339},
				name: "Digit2",
			},
		},
		{
			name: "dateMday",
			pos:  position{line: 245, col: 1, offset: 6346},
			expr: &ruleRefExpr{
				pos:  position{line: 245, col: 13, offset: 6358},
				name: "Digit2",
			},
		},
		{
			name: "timeHour",
			pos:  position{line: 246, col: 1, offset: 6365},
			expr: &ruleRefExpr{
				pos:  position{line: 246, col: 13, offset: 6377},
				name: "Digit2",
			},
		},
		{
			name: "timeMinute",
			pos:  position{line: 247, col: 1, offset: 6384},
			expr: &ruleRefExpr{
				pos:  position{line: 247, col: 15, offset: 6398},
				name: "Digit2",
			},
		},
		{
			name: "timeSecond",
			pos:  position{line: 248, col: 1, offset: 6405},
			expr: &ruleRefExpr{
				pos:  position{line: 248, col: 15, offset: 6419},
				name: "Digit2",
			},
		},
		{
			name: "timeSecfrac",
			pos:  position{line: 249, col: 1, offset: 6426},
			expr: &seqExpr{
				pos: position{line: 249, col: 16, offset: 6441},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 249, col: 16, offset: 6441},
						val:        ".",
						ignoreCase: false,
						want:       "\".\"",
					},
					&oneOrMoreExpr{
						pos: position{line: 249, col: 20, offset: 6445},
						expr: &charClassMatcher{
							pos:        position{line: 249, col: 20, offset: 6445},
							val:        "[0-9]",
							ranges:     []rune{'0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "timeNumoffset",
			pos:  position{line: 250, col: 1, offset: 6452},
			expr: &seqExpr{
				pos: position{line: 250, col: 18, offset: 6469},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 250, col: 19, offset: 6470},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 250, col: 19, offset: 6470},
								val:        "+",
								ignoreCase: false,
								want:       "\"+\"",
							},
							&litMatcher{
								pos:        position{line: 250, col: 25, offset: 6476},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 30, offset: 6481},
						name: "timeHour",
					},
					&litMatcher{
						pos:        position{line: 250, col: 39, offset: 6490},
						val:        ":",
						ignoreCase: false,
						want:       "\":\"",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 43, offset: 6494},
						name: "timeMinute",
					},
				},
			},
		},
		{
			name: "timeOffset",
			pos:  position{line: 251, col: 1, offset: 6505},
			expr: &choiceExpr{
				pos: position{line: 251, col: 15, offset: 6519},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 251, col: 15, offset: 6519},
						val:        "z",
						ignoreCase: true,
						want:       "\"Z\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 22, offset: 6526},
						name: "timeNumoffset",
					},
				},
			},
		},
		{
			name: "partialTime",
			pos:  position{line: 252, col: 1, offset: 6540},
			expr: &seqExpr{
				pos: position{line: 252, col: 16, offset: 6555},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 252, col: 16, offset: 6555},
						name: "timeHour",
					},
					&litMatcher{
						pos:        position{line: 252, col: 25, offset: 6564},
						val:        ":",
						ignoreCase: false,
						want:       "\":\"",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 29, offset: 6568},
						name: "timeMinute",
					},
					&litMatcher{
						pos:        position{line: 252, col: 40, offset: 6579},
						val:        ":",
						ignoreCase: false,
						want:       "\":\"",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 44, offset: 6583},
						name: "timeSecond",
					},
					&zeroOrOneExpr{
						pos: position{line: 252, col: 55, offset: 6594},
						expr: &ruleRefExpr{
							pos:  position{line: 252, col: 55, offset: 6594},
							name: "timeSecfrac",
						},
					},
				},
			},
		},
		{
			name: "fullTime",
			pos:  position{line: 253, col: 1, offset: 6607},
			expr: &seqExpr{
				pos: position{line: 253, col: 13, offset: 6619},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 253, col: 13, offset: 6619},
						name: "partialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 25, offset: 6631},
						name: "timeOffset",
					},
				},
			},
		},
		{
			name: "Digit4",
			pos:  position{line: 254, col: 1, offset: 6642},
			expr: &seqExpr{
				pos: position{line: 254, col: 11, offset: 6652},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 254, col: 11, offset: 6652},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 254, col: 16, offset: 6657},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 254, col: 21, offset: 6662},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 254, col: 26, offset: 6667},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Digit2",
			pos:  position{line: 255, col: 1, offset: 6673},
			expr: &seqExpr{
				pos: position{line: 255, col: 11, offset: 6683},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 255, col: 11, offset: 6683},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 255, col: 16, offset: 6688},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "logicalOR",
			pos:  position{line: 261, col: 1, offset: 6751},
			expr: &litMatcher{
				pos:        position{line: 261, col: 14, offset: 6764},
				val:        "OR",
				ignoreCase: false,
				want:       "\"OR\"",
			},
		},
		{
			name: "logicalAND",
			pos:  position{line: 263, col: 1, offset: 6770},
			expr: &litMatcher{
				pos:        position{line: 263, col: 15, offset: 6784},
				val:        "AND",
				ignoreCase: false,
				want:       "\"AND\"",
			},
		},
		{
			name: "logicalNOT",
			pos:  position{line: 265, col: 1, offset: 6791},
			expr: &choiceExpr{
				pos: position{line: 265, col: 15, offset: 6805},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 265, col: 15, offset: 6805},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 265, col: 15, offset: 6805},
								val:        "NOT",
								ignoreCase: false,
								want:       "\"NOT\"",
							},
							&ruleRefExpr{
								pos:  position{line: 265, col: 21, offset: 6811},
								name: "space",
							},
						},
					},
					&seqExpr{
						pos: position{line: 265, col: 29, offset: 6819},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 265, col: 29, offset: 6819},
								val:        "!",
								ignoreCase: false,
								want:       "\"!\"",
							},
							&zeroOrOneExpr{
								pos: position{line: 265, col: 33, offset: 6823},
								expr: &ruleRefExpr{
									pos:  position{line: 265, col: 33, offset: 6823},
									name: "space",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "opCOMP",
			pos:  position{line: 271, col: 1, offset: 6896},
			expr: &choiceExpr{
				pos: position{line: 271, col: 11, offset: 6906},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 271, col: 11, offset: 6906},
						name: "opCustom",
					},
					&actionExpr{
						pos: position{line: 272, col: 3, offset: 6917},
						run: (*parser).callonopCOMP3,
						expr: &litMatcher{
							pos:        position{line: 272, col: 3, offset: 6917},
							val:        "><",
							ignoreCase: false,
							want:       "\"><\"",
						},
					},
					&actionExpr{
						pos: position{line: 274, col: 5, offset: 6959},
						run: (*parser).callonopCOMP5,
						expr: &charClassMatcher{
							pos:        position{line: 274, col: 5, offset: 6959},
							val:        "[~]",
							chars:      []rune{'~'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&actionExpr{
						pos: position{line: 276, col: 5, offset: 7000},
						run: (*parser).callonopCOMP7,
						expr: &seqExpr{
							pos: position{line: 276, col: 5, offset: 7000},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 276, col: 5, offset: 7000},
									val:        "[<>]",
									chars:      []rune{'<', '>'},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrOneExpr{
									pos: position{line: 276, col: 10, offset: 7005},
									expr: &litMatcher{
										pos:        position{line: 276, col: 10, offset: 7005},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "opCustom",
			pos:  position{line: 280, col: 1, offset: 7047},
			expr: &actionExpr{
				pos: position{line: 280, col: 13, offset: 7059},
				run: (*parser).callonopCustom1,
				expr: &seqExpr{
					pos: position{line: 280, col: 13, offset: 7059},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 13, offset: 7059},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 280, col: 17, offset: 7063},
							label: "opname",
							expr: &oneOrMoreExpr{
								pos: position{line: 280, col: 24, offset: 7070},
								expr: &charClassMatcher{
									pos:        position{line: 280, col: 24, offset: 7070},
									val:        "[a-z]i",
									ranges:     []rune{'a', 'z'},
									ignoreCase: true,
									inverted:   false,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 280, col: 32, offset: 7078},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 288, col: 1, offset: 7188},
			expr: &zeroOrMoreExpr{
				pos: position{line: 288, col: 19, offset: 7206},
				expr: &charClassMatcher{
					pos:        position{line: 288, col: 19, offset: 7206},
					val:        "[ \\n\\t\\r]",
					chars:      []rune{' ', '\n', '\t', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "space",
			pos:  position{line: 290, col: 1, offset: 7218},
			expr: &oneOrMoreExpr{
				pos: position{line: 290, col: 10, offset: 7227},
				expr: &charClassMatcher{
					pos:        position{line: 290, col: 10, offset: 7227},
					val:        "[ \\n\\t\\r]",
					chars:      []rune{' ', '\n', '\t', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 292, col: 1, offset: 7239},
			expr: &litMatcher{
				pos:        position{line: 292, col: 7, offset: 7247},
				val:        "\n",
				ignoreCase: false,
				want:       "\"\\n\"",
			},
		},
		{
			name: "EOF",
			pos:  position{line: 294, col: 1, offset: 7253},
			expr: &notExpr{
				pos: position{line: 294, col: 7, offset: 7259},
				expr: &anyMatcher{
					line: 294, col: 8, offset: 7260,
				},
			},
		},
	},
}

func (c *current) onStart1(query interface{}) (interface{}, error) {
	return query, nil
}

func (p *parser) callonStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStart1(stack["query"])
}

func (c *current) onQuery1(clause interface{}) (interface{}, error) {
	return clause, nil
}

func (p *parser) callonQuery1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery1(stack["clause"])
}

func (c *current) onOrClause2(lhs, rhs interface{}) (interface{}, error) {
	return &Node{
		NodeType: NodeOr,
		Left:     lhs.(*Node),
		Right:    rhs.(*Node),
	}, nil
}

func (p *parser) callonOrClause2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrClause2(stack["lhs"], stack["rhs"])
}

func (c *current) onAndClause2(lhs, rhs interface{}) (interface{}, error) {
	return &Node{
		NodeType: NodeAnd,
		Left:     lhs.(*Node),
		Right:    rhs.(*Node),
	}, nil
}

func (p *parser) callonAndClause2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndClause2(stack["lhs"], stack["rhs"])
}

func (c *current) onNotClause2(cmp interface{}) (interface{}, error) {
	return &Node{
		NodeType: NodeNot,
		Left:     cmp.(*Node),
		Right:    nil,
	}, nil
}

func (p *parser) callonNotClause2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotClause2(stack["cmp"])
}

func (c *current) onComparison2(query interface{}) (interface{}, error) {
	return query, nil
}

func (p *parser) callonComparison2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison2(stack["query"])
}

func (c *current) onComparison12(field, operation, values interface{}) (interface{}, error) {
	var opOut string
	if operation == nil {
		opOut = "=="
	} else {
		opOut = operation.(string)
	}
	node := &Node{
		NodeType: NodeTerminal,
		Comparison: Comparison{
			Op:     opOut,
			Field:  field.([]string),
			Values: values.([]string),
		},
	}
	// require comparison operator for regexp
	if node.Comparison.Op == `==` {
		for _, v := range node.Comparison.Values {
			if v[0] == '/' && v[len(v)-1] == '/' {
				return nil, fmt.Errorf("regexp comparison should use comparison operator :~%s", v)
			}
		}
	}
	return node, nil
}

func (p *parser) callonComparison12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison12(stack["field"], stack["operation"], stack["values"])
}

func (c *current) onField1(pieces interface{}) (interface{}, error) {
	piecesSl := toIfaceSlice(pieces)
	if len(piecesSl) == 0 {
		return nil, fmt.Errorf("empty field")
	}
	field := []string{piecesSl[0].(string)}
	restSl := toIfaceSlice(piecesSl[1])
	for _, v := range restSl {
		vSl := toIfaceSlice(v)
		field = append(field, vSl[1].(string))
	}
	return field, nil
}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["pieces"])
}

func (c *current) onUnquotedFieldPiece1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedFieldPiece1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedFieldPiece1()
}

func (c *current) onStar1() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonStar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStar1()
}

func (c *current) onValueList2(first, rest interface{}) (interface{}, error) {
	return getTokens(first, rest, 3), nil
}

func (p *parser) callonValueList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueList2(stack["first"], stack["rest"])
}

func (c *current) onValueList21(value interface{}) (interface{}, error) {
	return []string{value.(string)}, nil
}

func (p *parser) callonValueList21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueList21(stack["value"])
}

func (c *current) onValue4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValue4()
}

func (c *current) onQuotedValue1() (interface{}, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	return strconv.Unquote(string(c.text))
}

func (p *parser) callonQuotedValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedValue1()
}

func (c *current) onRegexValue1() (interface{}, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	// TODO: below is handled in jsonquery at the moment, revisit when converting stuff to types
	// return c.text = c.text[1:len(c.text)-1], nil
	// Temporary workaround to verify that regexp values are actually valid
	if _, err := regexp.Compile(string(c.text[1 : len(c.text)-1])); err != nil {
		return "", err
	}
	return string(c.text), nil
}

func (p *parser) callonRegexValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexValue1()
}

func (c *current) onCIDRValue1() (interface{}, error) {
	// we don't want to do anything heavy in the parser, just assert that
	// barewords more or less conform. Actual parsing will be done when building
	// the query. This can be moved into the parser later
	return string(c.text), nil
}

func (p *parser) callonCIDRValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCIDRValue1()
}

func (c *current) onopCOMP3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP3()
}

func (c *current) onopCOMP5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonopCOMP5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP5()
}

func (c *current) onopCOMP7() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonopCOMP7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCOMP7()
}

func (c *current) onopCustom1(opname interface{}) (interface{}, error) {
	return toString(opname)
}

func (p *parser) callonopCustom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onopCustom1(stack["opname"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
